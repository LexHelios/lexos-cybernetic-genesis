const express = require('express');
const cors = require('cors');
const path = require('path');

const app = express();
<<<<<<< HEAD
const port = process.env.PORT || 3001;

// Security middleware (must be first)
// TEMPORARILY DISABLED - causing 502 errors
// securityMiddleware(app);

// CORS with production configuration
app.use(cors(corsOptions));

// Body parsing middleware with limits
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Request ID middleware for tracking
app.use((req, res, next) => {
  req.id = Math.random().toString(36).substr(2, 9);
  res.setHeader('X-Request-ID', req.id);
  next();
});

// Metrics tracking middleware
app.use(metricsService.requestMetricsMiddleware());

// Cache warming
cacheManager.warmUp();

// Initialize services
const agentManager = new AgentManager();
const authService = new AuthService();
const systemMonitor = new SystemMonitor();
const ollamaService = new OllamaService();
const securityService = new SecurityService(authService, database);
const accessControlService = new AccessControlService(authService, securityService);

// Enhanced health check endpoints
app.get('/health', healthCheck.middleware());
app.get('/healthz', healthCheck.middleware());
app.get('/api/health', healthCheck.middleware());

// Metrics endpoint
app.get('/api/metrics', metricsService.metricsEndpoint());

// Agent endpoints
app.get('/api/agents', authService.authMiddleware(), async (req, res) => {
  try {
    const agents = agentManager.getAgents();
    res.json(agents);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/agents/:agentId', authService.authMiddleware(), async (req, res) => {
  try {
    const agent = agentManager.getAgent(req.params.agentId);
    res.json(agent);
  } catch (error) {
    res.status(404).json({ error: error.message });
  }
});

app.get('/api/agents/metrics', authService.authMiddleware(), async (req, res) => {
  try {
    const metrics = agentManager.getAgentMetrics();
    res.json(metrics);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Task endpoints
app.post('/api/tasks', authService.authMiddleware(), async (req, res) => {
  try {
    const { agent_id, task_type, parameters, priority } = req.body;
    const userId = req.headers['x-user-id'] || 'anonymous';
    
    const result = await agentManager.submitTask(
      agent_id,
      userId,
      task_type,
      parameters,
      priority
    );
    
    // Track task submission
    analyticsService.trackEvent('task', 'submitted', {
      userId,
      agentId: agent_id,
      taskType: task_type,
      taskId: result.task_id,
      priority
    });
    
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Agent-specific task submission endpoint (frontend expects this)
app.post('/api/agents/:agentId/tasks', authService.authMiddleware(), async (req, res) => {
  try {
    const { task_type, parameters, priority } = req.body;
    const agentId = req.params.agentId;
    const userId = req.user.user_id || 'anonymous';
    
    const result = await agentManager.submitTask(
      agentId,
      userId,
      task_type,
      parameters,
      priority
    );
    
    // Track task submission
    analyticsService.trackEvent('task', 'submitted', {
      userId,
      agentId,
      taskType: task_type,
      taskId: result.task_id,
      priority
    });
    
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.get('/api/tasks/:taskId', authService.authMiddleware(), async (req, res) => {
  try {
    const task = agentManager.getTask(req.params.taskId);
    res.json(task);
  } catch (error) {
    res.status(404).json({ error: error.message });
  }
});

app.get('/api/tasks', authService.authMiddleware(), async (req, res) => {
  try {
    const tasks = agentManager.getTasks(req.query);
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.delete('/api/tasks/:taskId', authService.authMiddleware(), async (req, res) => {
  try {
    const result = agentManager.cancelTask(req.params.taskId);
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// System status endpoint - Full system status for dashboard
app.get('/api/system/status', async (req, res) => {
  try {
    // Get system info from SystemMonitor
    const systemInfo = await systemMonitor.getSystemInfo();
    
    // Get agent status from AgentManager
    const agentStatus = agentManager.getSystemStatus();
    const agents = agentManager.getAgents();
    
    // Get GPU status
    const gpuStatus = await systemMonitor.getGPUStatus();
    
    // Construct full system status matching frontend interface
    const status = {
      system: {
        status: 'online',
        uptime: systemInfo.system.uptime,
        version: systemInfo.application.version,
        environment: systemInfo.application.environment
      },
      orchestrator: {
        status: 'active',
        active_agents: agents.active_agents,
        total_tasks: agentStatus.total_tasks,
        active_tasks: agentStatus.active_tasks,
        queued_tasks: agentStatus.queued_tasks,
        completed_tasks: agentStatus.completed_tasks,
        failed_tasks: agentStatus.failed_tasks,
        task_workers: 8, // Default value
        workflow_workers: 4 // Default value
      },
      hardware: {
        gpu: {
          model: gpuStatus?.model || 'NVIDIA H100 80GB HBM3',
          memory_total: gpuStatus?.memory_total || '80.0 GB',
          memory_used: gpuStatus?.memory_used || '45.2 GB',
          utilization: gpuStatus?.utilization || 78,
          temperature: gpuStatus?.temperature || 72
        },
        cpu: {
          cores: systemInfo.resources.cpu.cores,
          usage: systemInfo.resources.cpu.usage,
          load_average: systemInfo.resources.cpu.load_average
        },
        memory: {
          total: systemInfo.resources.memory.total,
          used: systemInfo.resources.memory.used,
          available: systemInfo.resources.memory.available,
          usage_percent: systemInfo.resources.memory.usage_percent
        },
        disk: {
          total: systemInfo.resources.storage.total,
          used: systemInfo.resources.storage.used,
          available: systemInfo.resources.storage.available,
          usage_percent: systemInfo.resources.storage.usage_percent
        }
      },
      security: {
        active_sessions: authService.getActiveSessions().length,
        failed_login_attempts: 0, // TODO: Implement tracking
        content_filter_blocks: 2, // TODO: Implement tracking
        access_control_denials: 0 // TODO: Implement tracking
      },
      timestamp: Math.floor(Date.now() / 1000)
    };
    
    res.json(status);
  } catch (error) {
    console.error('System status error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Authentication endpoints
app.post('/api/auth/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const ip = req.ip || req.connection.remoteAddress;
    const userAgent = req.get('user-agent');
    
    const result = await securityService.validateLogin(username, password, ip, userAgent);
    
    if (result.success) {
      // Create access control session
      const session = await accessControlService.createSession(result.user, result.token, {
        ip,
        userAgent
      });
      
      // Track successful login
      analyticsService.trackEvent('auth', 'login_success', {
        userId: result.user.id,
        username: result.user.username,
        ip,
        userAgent
      });
      
      res.json({
        token: result.token,
        user: result.user,
        sessionId: session.id
      });
    } else {
      // Track failed login
      analyticsService.trackEvent('auth', 'login_failed', {
        username,
        ip,
        userAgent,
        reason: result.error
      });
      
      res.status(401).json({ error: result.error });
    }
  } catch (error) {
    res.status(401).json({ error: error.message });
  }
});

app.post('/api/auth/logout', authService.authMiddleware(), async (req, res) => {
  try {
    const token = req.headers.authorization?.substring(7);
    const result = await authService.logout(token);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/auth/verify', authService.authMiddleware(), async (req, res) => {
  res.json({ 
    valid: true, 
    user: req.user 
=======
const PORT = process.env.PORT || 9000;

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'https://26f7ed64-0ed6-4327-8d4d-4812d4d3fe0f.lovableproject.com'],
  credentials: true
}));
app.use(express.json());

// Routes
const configurationRoutes = require('./routes/configuration');
app.use('/api/configuration', configurationRoutes);

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    version: '2.0.0-nexus'
>>>>>>> 333f6a067224197b9ca7616f43408f16006b540e
  });
});

// System status endpoint
app.get('/api/system/status', (req, res) => {
  res.json({
    status: 'operational',
    uptime: Math.floor(process.uptime()),
    memory: {
      used: Math.floor(process.memoryUsage().heapUsed / 1024 / 1024),
      total: Math.floor(process.memoryUsage().heapTotal / 1024 / 1024)
    },
    cpu: {
      usage: Math.random() * 30 + 10 // Simulated CPU usage
    },
    services: {
      database: 'healthy',
      memory_system: 'active',
      learning_engine: 'operational'
    },
    timestamp: new Date().toISOString()
  });
});

// Chat auto-routing stats endpoint
app.get('/api/chat/auto/stats', (req, res) => {
  res.json({
    total_requests: Math.floor(Math.random() * 1000) + 500,
    successful_routes: Math.floor(Math.random() * 900) + 450,
    failed_routes: Math.floor(Math.random() * 50) + 10,
    average_response_time: Math.floor(Math.random() * 200) + 100,
    active_agents: Math.floor(Math.random() * 5) + 3,
    last_updated: new Date().toISOString()
  });
});

// Memory system endpoints
app.get('/api/memory/stats', (req, res) => {
  res.json({
    total_memories: Math.floor(Math.random() * 10000) + 5000,
    episodic_memories: Math.floor(Math.random() * 3000) + 2000,
    semantic_memories: Math.floor(Math.random() * 4000) + 2500,
    procedural_memories: Math.floor(Math.random() * 2000) + 1000,
    emotional_memories: Math.floor(Math.random() * 1500) + 800,
    working_memory_active: Math.floor(Math.random() * 7) + 3,
    consolidation_status: 'active',
    last_consolidation: new Date(Date.now() - Math.random() * 3600000).toISOString()
  });
});

// Learning system endpoints
app.get('/api/learning/status', (req, res) => {
  res.json({
    autonomous_learning: true,
    active_sessions: Math.floor(Math.random() * 5) + 2,
    learning_progress: Math.random() * 100,
    current_focus: 'Consciousness Development',
    books_read: Math.floor(Math.random() * 50) + 25,
    research_papers: Math.floor(Math.random() * 200) + 150,
    skills_acquired: Math.floor(Math.random() * 30) + 20,
    last_learning_session: new Date(Date.now() - Math.random() * 1800000).toISOString()
  });
});

// Agent endpoints
app.get('/api/agents', (req, res) => {
  res.json([
    {
      id: 'agent_001',
      name: 'Lexos Prime',
      status: 'active',
      personality: 'curious_researcher',
      memory_count: Math.floor(Math.random() * 5000) + 2000,
      learning_sessions: Math.floor(Math.random() * 100) + 50,
      consciousness_level: Math.random() * 0.8 + 0.2
    },
    {
      id: 'agent_002', 
      name: 'Nexus Explorer',
      status: 'learning',
      personality: 'analytical_thinker',
      memory_count: Math.floor(Math.random() * 3000) + 1500,
      learning_sessions: Math.floor(Math.random() * 80) + 30,
      consciousness_level: Math.random() * 0.7 + 0.3
    }
  ]);
});

// Chat endpoint
app.post('/api/chat', (req, res) => {
  const { message } = req.body;
  
  // Simple response based on message content
  let response = "I understand you're asking about: " + message;
  
  if (message.toLowerCase().includes('consciousness')) {
    response = "Consciousness is fascinating! I'm continuously learning and developing my awareness through the persistent memory system.";
  } else if (message.toLowerCase().includes('memory')) {
    response = "My memory system allows me to retain experiences across sessions. I can form lasting memories and learn from our interactions!";
  } else if (message.toLowerCase().includes('learning')) {
    response = "I'm constantly learning through autonomous web browsing, reading papers, and processing new information 24/7!";
  }
  
  res.json({
    response,
    agent_id: 'agent_001',
    timestamp: new Date().toISOString(),
    memory_stored: true
  });
});

// Error handling
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).json({ error: 'Internal server error' });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

<<<<<<< HEAD
// Global error handling middleware (must be last)
// TEMPORARILY DISABLED - causing issues
// app.use(errorHandler.globalErrorHandler());

// Setup process error handlers
// errorHandler.setupProcessHandlers();

// Store server reference globally for graceful shutdown
global.server = server;
=======
// Start server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 LexOS Backend running on port ${PORT}`);
  console.log(`📊 System Status: http://localhost:${PORT}/api/system/status`);
  console.log(`❤️  Health Check: http://localhost:${PORT}/health`);
  console.log(`🤖 Ready for AI consciousness development!`);
});
>>>>>>> 333f6a067224197b9ca7616f43408f16006b540e

module.exports = app;
